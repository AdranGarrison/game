__author__ = 'Alan'

from Items import *
from Attacks import *


import random
import kivy
from kivy.properties import ListProperty, DictProperty
from kivy.app import App
from kivy.uix.widget import Widget
from kivy.app import EventDispatcher


def flatten(l,ltypes=(list,tuple)):
    ltype=type(l)
    l=list(l)
    i=0
    while i<len(l):
        while isinstance(l[i],ltypes):
            if not l[i]:
                l.pop(i)
                i-=1
                break
            else:
                l[i:i+1]=l[i]
        i+=1
    return ltype(l)





def inventoryadd(item):
    print('{} added to inventory'.format(item))

def dropitem(item):
    print('You drop the {}'.format(item))

##############################################MATERIALS###############################################################

class Bone_Material():
    def __init__(self,thickness=1,quality=1,**kwargs):
        self.name='bone'
        self.maxquality=1.1
        self.quality=min(quality,self.maxquality)
        self.thickness=thickness
        self.density=1900
        self.youngs=12
        self.fracture_energy=1.5*self.quality
        self.tensile_strength=50*self.quality
        self.mode='brittle'
        self.fracture_toughness=(self.youngs*self.fracture_energy)**0.5
        self.shear=3.3
        self.shear_strength=70*self.quality
        self.electric_conduction=True
        self.heat_conduction=True
        self.dissipationfactor=1.5
        self.maxedge=(10**-4)/self.quality
        self.damagetype=['crack','break','crush','cut','shatter']

    def damageresolve(self,damagedobject,defender,force,pressure,attacker):
        if isinstance(defender,Limb)==True:
            defenderstats=defender.stats
        elif isinstance(defender,Creature)==True:
            defenderstats=defender.stats
        else:
            defenderstats={'str':10,'tec':10,'per':10,'wil':10,'luc':10}
        m=min(0.5*attacker.stats['luc']/defenderstats['luc'],1)


#Cutting---------------------------------------------------------------------
        rootarea=(force/pressure)**0.5
        if 1.5*force*(1/(3.5*damagedobject.thickness*rootarea)-self.density*rootarea/(3.5*damagedobject.mass))>self.shear_strength*1000000:
            if damagedobject.plural==False:
                print("the {} is cut!".format(damagedobject.name))
            else:
                print("the {} are cut!".format(damagedobject.name))
            damagedobject.damage['cut']+=1
#----------------------------------------------------------------------------

#Crushing--------------------------------------------------------------------
        if pressure>self.tensile_strength*(1200000-200000*random.triangular(low=0,high=1,mode=m)) and damagedobject.damage['crush']==0:
            if damagedobject.plural==False:
                print("the {} is crushed under the force of the blow!".format(damagedobject.name))
            else:
                print("the {} are crushed under the force of the blow!".format(damagedobject.name))
            damagedobject.damage['crush']=1
            pass
#----------------------------------------------------------------------------



#Cracking, Breaking, and Shattering------------------------------------------
        hitloc=random.triangular(low=0,high=1,mode=m)*damagedobject.length
        if force>10*(1-damagedobject.damage['crack'])*(3.14*self.tensile_strength*1000000*damagedobject.thickness**3)/hitloc:
            severity=force/((10*3.14*self.tensile_strength*1000000*damagedobject.thickness**3)/hitloc)-1
            cracklength=damagedobject.damage['crack']**0.5+severity**0.5

            #Cracked but not broken
            if cracklength<1:
                damagedobject.damage['crack']+=severity
                if damagedobject.plural==False:
                    print("the {} is cracked".format(damagedobject.name))
                else:
                    print("the {} are cracked".format(damagedobject.name))

            #Broken but not shattered
            elif severity<3 and damagedobject.damage['break']==0:
                damagedobject.damage['crack']=1
                damagedobject.damage['break']=1
                if damagedobject.plural==False:
                    print("the {} is broken!".format(damagedobject.name))
                else:
                    print("the {} are broken!".format(damagedobject.name))

            #Shattered
            elif severity>=3 and damagedobject.damage['shatter']==0:
                damagedobject.damage['crack']=1
                damagedobject.damage['break']=1
                damagedobject.damage['shatter']=1
                if damagedobject.plural==False:
                    print("the {} is shattered!".format(damagedobject.name))
                else:
                    print("the {} are shattered!".format(damagedobject.name))
#-----------------------------------------------------------------------------







class Flesh_Material():
    def __init__(self,thickness=1,quality=1,**kwargs):
        self.name='flesh'
        self.maxquality=1.1
        self.quality=min(quality,self.maxquality)
        self.thickness=thickness
        self.density=1000
        self.youngs=0.00002
        self.fracture_energy=0.2*self.quality
        self.tensile_strength=0.7*self.quality
        self.mode='soft'
        self.fracture_toughness=(self.youngs*self.fracture_energy)**0.5
        self.shear=0.00002
        self.shear_strength=0.4*self.quality
        self.electric_conduction=True
        self.heat_conduction=False
        self.dissipationfactor=1.5
        self.maxedge=0.01
        self.damagetype=['bruise','cut','crush']

    def damageresolve(self,damagedobject,defender,force,pressure,attacker):
        if isinstance(defender,Limb)==True:
            defenderstats=defender.stats
        elif isinstance(defender,Creature)==True:
            defenderstats=defender.stats
        else:
            defenderstats={'str':15,'tec':15,'per':15,'wil':15,'luc':15}

        #Bruising
        if pressure>self.tensile_strength*500000:
            if damagedobject.plural==False:
                print("the {} is bruised".format(damagedobject.name))
            else:
                print("the {} are bruised".format(damagedobject.name))
            severity=(pressure/(self.tensile_strength*500000)-1)*random.gauss(0.5*attacker.stats['luc']/defenderstats['luc'],0.5)
            pythagoreanseverity=(severity**2+damagedobject.damage['bruise']**2)**0.5
            damagedobject.damage['bruise']=pythagoreanseverity


class Iron():
    def __init__(self,thickness=1,quality=1,**kwargs):
        self.name='iron'
        self.maxquality=2
        self.quality=min(quality,self.maxquality)
        self.thickness=thickness
        self.density=7874
        self.youngs=118
        self.fracture_energy=11*self.quality
        self.tensile_strength=310*self.quality
        self.mode='brittle'
        self.fracture_toughness=(self.youngs*self.fracture_energy)**0.5
        self.shear=48
        self.shear_strength=304*self.quality
        self.electric_conduction=True
        self.heat_conduction=True
        self.dissipationfactor=1
        self.maxedge=(10**-7)/self.quality
        self.damagetype=['crack','break','shatter','crush','cut']

    def damageresolve(self,damagedobject,defender,force,pressure,attacker):
        if isinstance(defender,Limb)==True:
            defenderstats=defender.stats
        elif isinstance(defender,Creature)==True:
            defenderstats=defender.stats
        else:
            defenderstats={'str':15,'tec':15,'per':15,'wil':15,'luc':15}

        #Cracking
        m=min(0.5*attacker.stats['luc']/defenderstats['luc'],1)
        hitloc=random.triangular(low=0,high=1,mode=m)*damagedobject.length
        if force>10*(3.14*self.tensile_strength*1000000*damagedobject.thickness**3)/hitloc:
            if damagedobject.plural==False:
                print("the {} is cracked".format(damagedobject.name))
            else:
                print("the {} are cracked".format(damagedobject.name))
            severity=force/((10*3.14*self.tensile_strength*1000000*damagedobject.thickness**3)/hitloc)-1
            damagedobject.damage['crack']+=severity


class Steel():
    def __init__(self,thickness=1,quality=1,**kwargs):
        self.name='steel'
        self.maxquality=3
        self.quality=min(quality,self.maxquality)
        self.thickness=thickness
        self.density=7850
        self.youngs=211
        self.fracture_energy=11.8*self.quality*self.quality
        self.tensile_strength=900*self.quality
        self.mode='ductile'
        self.fracture_toughness=(self.youngs*self.fracture_energy)**0.5
        self.shear=80
        self.shear_strength=0.6*self.tensile_strength
        self.electric_conduction=True
        self.heat_conduction=True
        self.dissipationfactor=1
        self.maxedge=(5*10**-8)/self.quality
        self.damagetype=['dent','crush','bend','cut']


class Copper():
    def __init__(self,thickness=1,quality=1,**kwargs):
        self.name='copper'
        self.maxquality=1.2
        self.quality=min(quality,self.maxquality)
        self.thickness=thickness
        self.density=8960
        self.youngs=116
        self.fracture_energy=2*self.quality
        self.tensile_strength=318*self.quality
        self.mode='ductile'
        self.fracture_toughness=(self.youngs*self.fracture_energy)**0.5
        self.shear=44
        self.shear_strength=178*self.quality
        self.electric_conduction=True
        self.heat_conduction=True
        self.dissipationfactor=1
        self.maxedge=(1.5*10**-7)/self.quality
        self.damagetype=['dent','crush','bend','cut']

class Bronze():
    def __init__(self,thickness=1,quality=1,**kwargs):
        self.name='bronze'
        self.maxquality=2
        self.quality=min(quality,self.maxquality)
        self.thickness=thickness
        self.density=8860
        self.youngs=110
        self.fracture_energy=56*self.quality
        self.tensile_strength=491*self.quality
        self.mode='ductile'
        self.fracture_toughness=(self.youngs*self.fracture_energy)**0.5
        self.shear=43
        self.shear_strength=297*self.tensile_strength
        self.electric_conduction=True
        self.heat_conduction=True
        self.dissipationfactor=1
        self.maxedge=(10**-7)/self.quality
        self.damagetype=['dent','crush','bend','cut']

class Brass():
    def __init__(self,thickness=1,quality=1,**kwargs):
        self.name='brass'
        self.maxquality=2
        self.quality=min(quality,self.maxquality)
        self.thickness=thickness
        self.density=8550
        self.youngs=110
        self.fracture_energy=11.3*self.quality
        self.tensile_strength=435*self.quality
        self.mode='ductile'
        self.fracture_toughness=(self.youngs*self.fracture_energy)**0.5
        self.shear=39
        self.shear_strength=273*self.quality
        self.electric_conduction=True
        self.heat_conduction=True
        self.dissipationfactor=1
        self.maxedge=(10**-7)/self.quality
        self.damagetype=['dent','crush','bend','cut']


class Titanium():
    def __init__(self,thickness=1,quality=1,**kwargs):
        self.name='titanium'
        self.maxquality=1.5
        self.quality=min(quality,self.maxquality)
        self.thickness=thickness
        self.density=4500
        self.youngs=114
        self.fracture_energy=11.3*self.quality
        self.tensile_strength=1060*self.quality
        self.mode='brittle'
        self.fracture_toughness=(self.youngs*self.fracture_energy)**0.5
        self.shear=44
        self.shear_strength=711*self.quality
        self.electric_conduction=True
        self.heat_conduction=True
        self.dissipationfactor=1
        self.maxedge=(5*10^-8)/self.quality
        self.damagetype=['crack','break','shatter','crush','cut']

    def damageresolve(self,damagedobject,defender,force,pressure,attacker):
        if isinstance(defender,Limb)==True:
            defenderstats=defender.stats
        elif isinstance(defender,Creature)==True:
            defenderstats=defender.stats
        else:
            defenderstats={'str':15,'tec':15,'per':15,'wil':15,'luc':15}


        #Cracking
        m=min(0.5*attacker.stats['luc']/defenderstats['luc'],1)
        hitloc=random.triangular(low=0,high=1,mode=m)*damagedobject.length
        if force>10*(3.14*self.tensile_strength*1000000*damagedobject.thickness**3)/hitloc:
            if damagedobject.plural==False:
                print("the {} is cracked".format(damagedobject.name))
            else:
                print("the {} are cracked".format(damagedobject.name))
            severity=force/((10*3.14*self.tensile_strength*1000000*damagedobject.thickness**3)/hitloc)-1
            damagedobject.damage['crack']+=severity


class Silver():
    def __init__(self,thickness=1,quality=1,**kwargs):
        self.name='silver'
        self.maxquality=1.5
        self.quality=min(quality,self.maxquality)
        self.thickness=thickness
        self.density=16000
        self.youngs=81
        self.fracture_energy=11.3*self.quality
        self.tensile_strength=333*self.quality
        self.mode='ductile'
        self.fracture_toughness=(self.youngs*self.fracture_energy)**0.5
        self.shear=30
        self.shear_strength=self.tensile_strength*0.65
        self.electric_conduction=True
        self.heat_conduction=True
        self.dissipationfactor=1
        self.maxedge=(2*10**-7)/self.quality
        self.damagetype=['dent','crush','bend','cut']

class Aluminum():
    def __init__(self,thickness=1,quality=1,**kwargs):
        self.name='aluminum'
        self.maxquality=1.1
        self.quality=min(quality,self.maxquality)
        self.thickness=thickness
        self.density=2699
        self.youngs=68
        self.fracture_energy=5.88*self.quality
        self.tensile_strength=45*self.quality
        self.mode='ductile'
        self.fracture_toughness=(self.youngs*self.fracture_energy)**0.5
        self.shear=25
        self.shear_strength=self.tensile_strength*0.65
        self.electric_conduction=True
        self.heat_conduction=True
        self.dissipationfactor=1
        self.maxedge=(2*10**-7)/self.quality
        self.damagetype=['dent','crush','bend','cut']

class Duraluminum():
    #Copper Aluminum alloy
    def __init__(self,thickness=1,quality=1,**kwargs):
        self.name='duraluminum'
        self.maxquality=3
        self.quality=min(quality,self.maxquality)
        self.thickness=thickness
        self.density=2780
        self.youngs=73
        self.fracture_energy=5.63*self.quality
        self.tensile_strength=200*self.quality
        self.mode='ductile'
        self.fracture_toughness=(self.youngs*self.fracture_energy)**0.5
        self.shear=27.5
        self.shear_strength=100*self.quality
        self.electric_conduction=True
        self.heat_conduction=True
        self.dissipationfactor=1
        self.maxedge=(1.5*10**-7)/self.quality
        self.damagetype=['dent','crush','bend','cut']

class Zicral():
    #Zinc Aluminum alloy
    def __init__(self,thickness=1,quality=1,**kwargs):
        self.name='zicral'
        self.maxquality=5
        self.quality=min(quality,self.maxquality)
        self.thickness=thickness
        self.density=2810
        self.youngs=71.1
        self.fracture_energy=18*self.quality
        self.tensile_strength=140*self.quality
        self.mode='brittle'
        self.fracture_toughness=(self.youngs*self.fracture_energy)**0.5
        self.shear=26.8
        self.shear_strength=100*self.quality
        self.electric_conduction=True
        self.heat_conduction=True
        self.dissipationfactor=1
        self.maxedge=(10**-7)/self.quality
        self.damagetype=['crack','break','shatter','crush','cut']

    def damageresolve(self,damagedobject,defender,force,pressure,attacker):
        if isinstance(defender,Limb)==True:
            defenderstats=defender.stats
        elif isinstance(defender,Creature)==True:
            defenderstats=defender.stats
        else:
            defenderstats={'str':15,'tec':15,'per':15,'wil':15,'luc':15}


        #Cracking
        m=min(0.5*attacker.stats['luc']/defenderstats['luc'],1)
        hitloc=random.triangular(low=0,high=1,mode=m)*damagedobject.length
        if force>10*(3.14*self.tensile_strength*1000000*damagedobject.thickness**3)/hitloc:
            if damagedobject.plural==False:
                print("the {} is cracked".format(damagedobject.name))
            else:
                print("the {} are cracked".format(damagedobject.name))
            severity=force/((10*3.14*self.tensile_strength*1000000*damagedobject.thickness**3)/hitloc)-1
            damagedobject.damage['crack']+=severity


class Wood():
    def __init__(self,thickness=1,quality=1,**kwargs):
        self.name='wood'
        self.maxquality=1.5
        self.quality=min(quality,self.maxquality)
        self.thickness=thickness
        self.density=450
        self.youngs=11
        self.fracture_energy=1.5*self.quality
        self.tensile_strength=45*self.quality
        self.mode='brittle'
        self.fracture_toughness=(self.youngs*self.fracture_energy)**0.5
        self.shear=2
        self.shear_strength=10*self.quality
        self.electric_conduction=False
        self.heat_conduction=False
        self.dissipationfactor=1
        self.maxedge=(10**-4)/self.quality
        self.damagetype=['dent','crack','break','crush','cut']

    def damageresolve(self,damagedobject,defender,force,pressure,attacker):
        if isinstance(defender,Limb)==True:
            defenderstats=defender.stats
        elif isinstance(defender,Creature)==True:
            defenderstats=defender.stats
        else:
            defenderstats={'str':15,'tec':15,'per':15,'wil':15,'luc':15}


        #Cracking
        m=min(0.5*attacker.stats['luc']/defenderstats['luc'],1)
        hitloc=random.triangular(low=0,high=1,mode=m)*damagedobject.length
        if force>10*(3.14*self.tensile_strength*1000000*damagedobject.thickness**3)/hitloc:
            if damagedobject.plural==False:
                print("the {} is cracked".format(damagedobject.name))
            else:
                print("the {} are cracked".format(damagedobject.name))
            severity=force/((10*3.14*self.tensile_strength*1000000*damagedobject.thickness**3)/hitloc)-1
            damagedobject.damage['crack']+=severity


class Leather():
    pass

class Cloth():
    pass

######################################################################################################################


##############################################ITEMS###################################################################


############################################BodyParts#######################################
class Bone():
    #length is bone length in meters
    #radius is bone radius in meters
    def __init__(self,length=0.5,radius=0.03,in_radius=0,material=Bone_Material,name='bone',plural=False):
        self.plural=plural
        self.material=material()
        if isinstance(self.material,Bone_Material):
            self.name=name
        else:
            self.name=self.material.name+" "+name
        self.length=length
        self.radius=radius
        self.in_radius=in_radius
        self.cross_section_range=[3.14*(self.radius**2-in_radius**2),self.length*2*(self.radius-in_radius)]
        self.thickness=self.radius-in_radius
        self.parry=True
        self.mass=self.material.density*(self.length*(self.radius**2-in_radius**2))*3.14
        self.wield='grasp'
        self.centermass=length*0.5
        self.curvature=0
        self.attacktype=['bludgeon']
        self.I=(1/12)*self.mass*self.length**2+self.mass*self.centermass**2
        self.damagetype=self.material.damagetype
        self.dissipationfactor=self.material.dissipationfactor
        self.damage={'bruise':0,'crack':0,'dent':0,'bend':0,'deform':0,'break':0,'cut':0,'shatter':0,'crush':0,'burn':0}
        self.function=1

    def damageresolve(self,limb,force,pressure,attacker):
        self.olddamage=self.damage
        self.material.damageresolve(self,limb,force,pressure,attacker)
        if self.damage['cut']>self.olddamage['cut']:
            if self.plural==False:
                print("the {} is severed!".format(self.name))
            if self.plural==True:
                print("the {} are severed!".format(self.name))
            limb.cut=True
            self.function=0
            return




class Flesh():
    #length is limb length in meters
    #in_radius is the inner radius of the flesh
    #out_radius is the radius of the skin
    def __init__(self,length=0.5,in_radius=0.03,out_radius=0.05,material=Flesh_Material,name='flesh',plural=False):
        self.plural=plural
        self.material=material()
        if isinstance(self.material,Flesh_Material):
            self.name=name
        else:
            self.name=self.material.name+' '+name
        self.length=length
        self.radius=out_radius
        self.in_radius=in_radius
        self.cross_section_range=[3.14*(self.radius**2-in_radius**2),self.length*2*(self.radius-in_radius)]
        self.thickness=self.radius-self.in_radius
        self.parry=False
        self.mass=self.material.density*(self.length*self.radius**2-self.length*self.in_radius**2)*3.14
        self.wield='grasp'
        self.centermass=length*0.5
        self.curvature=0
        self.attacktype=None
        self.I=(1/12)*self.mass*self.length**2+self.mass*self.centermass**2
        self.damagetype=self.material.damagetype
        self.damage={'bruise':0,'crack':0,'dent':0,'bend':0,'deform':0,'break':0,'cut':0,'shatter':0,'crush':0,'burn':0}
        self.dissipationfactor=self.material.dissipationfactor

    def damageresolve(self,limb,force,pressure,attacker):
        self.material.damageresolve(self,limb,force,pressure,attacker)
        pass




############################################Weapons#########################################
class LongSword():
    #length is blade length in meters
    #edge is edge width in meters
    #tip is tip surface area in square meters
    #width is blade width in meters
    #thickness is blade thickness in meters
    def __init__(self,length=1,edge=0.00001,tip=0.0000001,width=0.035,thickness=0.007,material=Iron):
        self.material=material()
        self.length=length
        self.edge=edge
        self.tip=tip
        self.width=width
        self.thickness=thickness
        self.parry=True
        self.mass=self.material.density*(self.length*self.width*self.thickness)
        self.wield='grasp'
        self.centermass=length*0.1
        self.curvature=0
        self.attacktype=['stab','slash']
        self.I=(1/12)*self.mass*self.length**2+self.mass*self.centermass**2
        self.damagetype=self.material.damagetype
        self.damagetype.append('blunt')

class Gladius():
    #length is blade length in meters
    #edge is edge width in meters
    #tip is tip surface area in square meters
    #width is blade width in meters
    #thickness is blade thickness in meters
    def __init__(self,length=0.6,edge=0.00001,tip=0.0000001,width=0.035,thickness=0.007,material=Iron):
        self.material=material()
        self.length=length
        self.edge=edge
        self.tip=tip
        self.width=width
        self.thickness=thickness
        self.parry=True
        self.mass=self.material.density*(self.length*self.width*self.thickness)
        self.wield='grasp'
        self.centermass=length*0.2
        self.curvature=0
        self.attacktype=['stab','slash']
        self.I=(1/12)*self.mass*self.length**2+self.mass*self.centermass**2
        self.damagetype=self.material.damagetype
        self.damagetype.append('blunt')


class Knife():
    #length is blade length in meters
    #edge is edge width in meters
    #tip is tip surface area in square meters
    #width is blade width in meters
    #thickness is blade thickness in meters
    def __init__(self,length=0.3,edge=0.000005,tip=0.000000025,width=0.035,thickness=0.01,material=Iron):
        self.material=material()
        self.length=length
        self.edge=edge
        self.tip=tip
        self.width=width
        self.thickness=thickness
        self.parry=True
        self.mass=self.material.density*(self.length*self.width*self.thickness)
        self.wield='grasp'
        self.centermass=length*0.4
        self.curvature=0
        self.attacktype=['stab','slash']
        self.I=(1/12)*self.mass*self.length**2+self.mass*self.centermass**2
        self.damagetype=self.material.damagetype
        self.damagetype.append('blunt')


class Saber():
    #length is blade length in meters
    #edge is edge width in meters
    #tip is tip surface area in square meters
    #width is blade width in meters
    #thickness is blade thickness in meters
    def __init__(self,length=1,edge=0.000005,tip=0.0000002,width=0.035,thickness=0.006,material=Iron):
        self.material=material()
        self.length=length
        self.edge=edge
        self.tip=tip
        self.width=width
        self.thickness=thickness
        self.parry=True
        self.mass=self.material.density*(self.length*self.width*self.thickness)
        self.wield='grasp'
        self.centermass=length*0.3
        self.curvature=0.2
        self.attacktype=['stab','slash']
        self.I=(1/12)*self.mass*self.length**2+self.mass*self.centermass**2
        self.damagetype=self.material.damagetype
        self.damagetype.append('blunt')


class Claymore():
    #length is blade length in meters
    #edge is edge width in meters
    #tip is tip surface area in square meters
    #width is blade width in meters
    #thickness is blade thickness in meters
    def __init__(self,length=1.3,edge=0.00001,tip=0.0000001,width=0.04,thickness=0.008,material=Iron):
        self.material=material()
        self.length=length
        self.edge=edge
        self.tip=tip
        self.width=width
        self.thickness=thickness
        self.parry=True
        self.mass=self.material.density*(self.length*self.width*self.thickness)
        self.wield='grasp'
        self.centermass=length*0.1
        self.curvature=0
        self.attacktype=['stab','slash']
        self.I=(1/12)*self.mass*self.length**2+self.mass*self.centermass**2
        self.damagetype=self.material.damagetype
        self.damagetype.append('blunt')


class Mace():
    #length is length of mace in meters
    #head is head radius in meters
    def __init__(self,length=0.8,head=0.06,material=Iron):
        self.material=material()
        self.length=length
        self.head=head
        self.parry=True
        self.mass=self.material.density*(self.length*3.14*0.005**2+1.33*3.14*self.head**3)
        self.wield='grasp'
        self.centermass=length*0.8
        self.curvature=0.3
        self.contactarea=0.5(1-self.curvature)*3.14*self.head**2
        self.attacktype=['bludgeon']
        self.I=self.mass*self.centermass**2


class FlangedMace():
    #length is length of mace in meters
    #head is head radius in meters
    #contactarea is the contact area of a flange or spike in square meters
    def __init__(self,length=0.8,head=0.06,contactarea=.0008,material=Iron):
        self.material=material()
        self.length=length
        self.head=head
        self.contactarea=contactarea
        self.parry=True
        self.mass=self.material.density*(self.length*3.14*0.005**2+1.33*3.14*self.head**3)
        self.wield='grasp'
        self.centermass=length*0.8
        self.attacktype=['bludgeon']
        self.I=self.mass*self.centermass**2
        self.damagetype=self.material.damagetype
        self.damagetype.append('blunt')

class WarHammer():
    #length is length of war hammer in meters
    #headsize is the volume of the head in cubic meters
    #contactarea is the contact area of the spike in square meters
    def __init__(self,length=1.1,headsize=0.001,contactarea=.00005,material=Iron):
        self.material=material()
        self.length=length
        self.headsize=headsize
        self.contactarea=contactarea
        self.parry=True
        self.mass=self.material.density*(self.headsize)
        self.wield='grasp'
        self.centermass=length*0.8
        self.attacktype=['bludgeon']
        self.I=self.mass*self.centermass**2
        self.damagetype=self.material.damagetype


class Spear():
    #length is length of the spear in meters
    #tip is area of tip in square meters
    def __init__(self,length=1.5,tip=0.000000025,material=Iron):
        self.material=material()
        self.length=length
        self.tip=tip
        self.parry=True
        self.mass=self.material.density*(0.0001)+self.length
        self.wield='grasp'
        self.centermass=length*0.5
        self.curvature=0
        self.attacktype=['stab']
        self.I=(1/12)*self.length**3+self.mass*self.centermass**2
        self.damagetype=self.material.damagetype
        self.damagetype.append('blunt')


class Axe():
    def __init__(self):
        pass




weapon=Spear()

print(weapon.mass,weapon.I)



######################################################################################################################



##############################################LIMBS###################################################################
'''Here are all the body parts we will use to create our creatures. Here we lay out the format we will adhere to:

Sizefactor represents the relative likelihood of a given part being hit on a randomly targeted swing or alternatively the
ease with which the part is hit when intentionally targeted.

If a limb is natural (natural=True), then its individual stats will be the same as its owner's and will change therewith

If self.grasp is true, the limb is currently capable of grasping objects

self.ability determines how well-functioning the limb currently is given its current wounds.

self.dexterity determines how well a limb can manipulate objects. From 1 to 10. Applies only to limbs which can grasp

self.balance determines how well a limb supports weight nimbly. Applies only to limbs which can be walked upon

wield indicates the types of equipment the limb in question can wield.
Options are:
ring, glove, bracelet, armlet, chest, helmet, necklace, legging, boot, grasp

These same above terms will be included in the self.wield for each equippable item type

self.equip is a dictionary housing the equipment for each slot

self.wounds is a list containing all wounds. Since bruises and cuts are of varying severity from minor to debilitating,
the first entries are always the bruising level and the cut level. Both of these run from zero (no damage) to 3 (crippling damage).
This may expanded upon later to differentiate bruises to the bone, muscle, or skin, though the net effect of these types
of damage are likely to be negligible. Wounds are as follows:
Lightly bruised, moderately bruised, badly bruised, scratched, cut, deeply cut, cracked, broken, crushed, burned, severed, crippled

self.limbs indicates all limbs attached to the limb in question.

self.scars is currently a placeholder, but will keep track of scars from past wounds

self.diagnosis is what the game will print to the player upon query

self.attacktype is the type of attack the limb grants. It depends upon current equipment when applicable
'''




class Limb(Widget):
    def __init__(self,stats,natural=True,owner=None,*args,**kwargs):
        self.owner=owner
        self.stats=stats
        self.grasp=False
        self.support=False
        self.ability=1
        pass



    def youngscalc(self):
        sum=0
        i=len(self.layers)-1
        masssum=0
        ltotal=0
        limbmass=self.mass
        if self.armor is not None:
            sum+=self.armor.thickness/self.armor.material.youngs
            masssum+=self.armor.mass
            ltotal+=self.armor.thickness
            limbmass=self.mass+self.armor.mass
            print(self.armor,self.armor.mass,self.armor.thickness,self.armor.material.youngs)
        while i>=0:
            sum+=(self.layers[i].thickness/self.layers[i].material.youngs)*(1-masssum/limbmass)
            masssum+=self.layers[i].mass
            ltotal+=self.layers[i].thickness
            i-=1
        self.youngs=ltotal/sum
        self.thickness=ltotal

    def damageresolve(self,force,pressure,attacker):
        print('the {} is hit!'.format(self.name))
        i=len(self.layers)-1
        f=force
        pressure=pressure
        area=force/pressure
        mass=self.mass
        cut=False
        if self.armor is not None:
            pass
        while i>=0:
            #print(f)
            #Code cut from here in hopes of improving

            self.layers[i].damageresolve(self,f,pressure,attacker)

            if self.layers[i].material.mode=='soft':
                softnessfactor=0.3
            else:
                softnessfactor=1

            if cut==False:
                f-=softnessfactor*f*self.layers[i].mass/mass
                area=area+(3.54*self.layers[i].thickness*area**0.5)*self.layers[i].dissipationfactor/softnessfactor
                pressure=f/area
            i-=1



class Finger(Limb):
    limbs=ListProperty([])
    stats=DictProperty({})
    def __init__(self,stats,name,length=0.1,radius=0.01,natural=True,owner=None,**kwargs):
        super().__init__(stats,**kwargs)
        self.owner=owner
        self.sizefactor=2
        self.length=length
        self.radius=radius
        self.natural=natural
        self.name=name
        self.grasp=False
        self.support=False
        self.ability=1
        self.stats=stats
        self.equiptype=['ring','glove']
        self.equipment={'ring':None,'glove':None}
        self.armor=None
        self.scars=[]
        self.diagnosis='This is a humanoid finger of {}.'.format(self.owner.indefinitename)
        self.attacktype=None
        self.attachpoint=None
        self.layers=[Bone(length=self.length,radius=self.radius*0.8),Flesh(length=self.length,in_radius=self.radius*0.8,out_radius=self.radius)]
        self.mass=0
        for i in self.layers:
            self.mass+=i.mass
        self.movemass=self.mass
        for i in self.limbs:
            self.movemass+=i.movemass
        self.youngscalc()


    def equip(self,item):
        if item.wield=='ring':
            if self.equipment['ring']!=None:
                if self.equipment['ring'].mass:
                    self.movemass-=self.equipment['ring'].mass
                inventoryadd(self.equipment['ring'])
            self.equipment['ring']=item
            if item.mass:
                self.movemass+=item.mass

        if item.wield=='glove':
            self.equipment['glove']=item


    def on_limbs(self,*args):
        pass

    def on_stats(self,*args):
        pass


class Hand(Limb):
    limbs=ListProperty(())
    stats=DictProperty(None)
    def __init__(self,stats,name,length=0.1,radius=0.022,natural=True,owner=None,**kwargs):
        super().__init__(stats,**kwargs)
        self.sizefactor=10
        self.owner=owner
        self.natural=natural
        self.name=name
        self.length=length
        self.radius=radius
        self.grasp=True
        self.support=False
        self.ability=1
        self.stats=stats
        self.equiptype=['glove','grasp']
        self.equipment={'glove':None,'grasp':None}
        self.armor=None

        self.thumb=Finger(stats,'thumb, {}'.format(name),owner=owner)
        self.firstfinger=Finger(stats,'first finger, {}'.format(name),owner=owner)
        self.secondfinger=Finger(stats,'second finger, {}'.format(name),owner=owner)
        self.thirdfinger=Finger(stats,'third finger, {}'.format(name),owner=owner)
        self.fourthfinger=Finger(stats,'fourth finger, {}'.format(name),owner=owner)

        self.limbs=[self.thumb,self.firstfinger,self.secondfinger,self.thirdfinger,self.fourthfinger]
        self.scars=[]
        self.diagnosis='This is a humanoid hand of {}.'.format(self.owner.indefinitename)
        self.attacktype='punch'
        self.dexterity=self.ability
        for i in self.limbs:
            self.dexterity+=i.ability
            i.attachpoint=self
        self.attachpoint=None
        self.layers=[Bone(length=self.length,radius=self.radius*0.9),Flesh(length=self.length,in_radius=self.radius*0.9,out_radius=self.radius)]
        self.mass=0
        for i in self.layers:
            self.mass+=i.mass
        self.movemass=self.mass
        for i in self.limbs:
            self.movemass+=i.movemass
        self.youngscalc()


    def equip(self,item):
        if item.wield=='glove':
            if self.equipment['glove']!=None:
                inventoryadd(self.equipment['glove'])
                if self.equipment['glove'].mass:
                    self.movemass-=self.equipment['glove'].mass
            self.equipment['glove']=item
            if item.mass:
                self.movemass+=item.mass
            for i in self.limbs:
                i.equip(item)

        if self.grasp==True:
            if item.wield=='grasp':
                if self.equipment['grasp']!=None:
                    inventoryadd(self.equipment['grasp'])
                    if self.equipment['grasp'].mass:
                        self.movemass-=self.equipment['glove'].mass

                self.equipment['grasp']=item
                if item.mass:
                    self.movemass+=item.mass
                self.attacktype=item.attacktype



    def on_wounds(self,*args):
        self.ability=max(self.ability,0)
        if self.ability==0:
            self.grasp=False
        fingerfunction=0
        fingercount=0
        for i in self.limbs:
            fingerfunction+=i.ability
            if i.ability>0:
                fingercount+=1
        if fingercount<2:
            self.grasp=False

        self.dexterity=fingerfunction+2*self.ability

        if self.grasp==False:
            if self.equipment['grasp']!=None:
                dropitem(self.equipment['grasp'])
                self.equipment['grasp']=None
                self.attacktype=None


    def on_limbs(self,*args):
        pass

    def on_stats(self,*args):
        for i in self.limbs:
            if i.natural==True:
                i.stats=self.stats


class Arm(Limb):
    limbs=ListProperty(())
    stats=DictProperty(None)
    def __init__(self,stats,name,length=0.75,boneradius=0.013,natural=True,owner=None,**kwargs):
        super().__init__(stats,**kwargs)
        self.sizefactor=100
        self.owner=owner
        self.natural=natural
        self.name=name+' arm'
        self.length=length
        self.grasp=False
        self.support=False
        self.ability=1
        self.stats=stats
        self.radius=(self.stats['str']/10000+boneradius**2)**0.5
        self.equiptype=['armlet','bracelet']
        self.equipment={'armlet':None,'bracelet':None}
        self.armor=None

        self.hand=Hand(stats,'{} hand'.format(name),owner=owner)
        self.hand.attachpoint=self

        self.limbs=[self.hand]
        self.scars=[]
        self.diagnosis='This is an arm of {}.'.format(self.owner.indefinitename)
        self.attacktype=None
        self.attachpoint=None
        self.layers=[Bone(length=self.length,radius=boneradius),Flesh(length=self.length,in_radius=boneradius,out_radius=self.radius)]
        self.mass=0
        for i in self.layers:
            self.mass+=i.mass
        self.movemass=self.mass
        for i in self.limbs:
            self.movemass+=i.movemass
        self.youngscalc()


    def equip(self,item):
        if item.wield=='armlet':
            if self.equipment['armlet']!=None:
                inventoryadd(self.equipment['armlet'])
                if self.equipment['armlet'].mass:
                    self.movemass-=self.equipment['armlet'].mass
            self.equipment['armlet']=item
            if item.mass:
                self.movemass+=item.mass

        if item.wield=='bracelet':
            if self.equipment['bracelet']!=None:
                inventoryadd(self.equipment['bracelet'])
                if self.equipment['bracelet'].mass:
                    self.movemass+=self.equipment['bracelet'].mass
            self.equipment['bracelet']=item
            if item.mass:
                self.movemass+=item.mass




    def on_limbs(self,*args):
        pass

    def on_stats(self,*args):
        for i in self.limbs:
            if i.natural==True:
                i.stats=self.stats


class Torso(Limb):
    limbs=ListProperty(())
    stats=DictProperty(None)
    def __init__(self,stats,name,length=0.9,radius=0.1,natural=True,owner=None,**kwargs):
        super().__init__(stats,**kwargs)
        self.sizefactor=40
        self.owner=owner
        self.natural=natural
        self.name=name
        self.grasp=False
        self.support=False
        self.ability=1
        self.stats=stats
        self.length=length
        self.radius=radius
        self.equiptype=['chest']
        self.equipment={'chest':None}
        self.armor=None

        self.rightarm=Arm(stats,'right',owner=owner)
        self.rightarm.attachpoint=self
        self.leftarm=Arm(stats,'left',owner=owner)
        self.leftarm.attachpoint=self
        self.rightleg=Leg(stats,'right',owner=owner)
        self.rightleg.attachpoint=self
        self.leftleg=Leg(stats,'left',owner=owner)
        self.leftleg.attachpoint=self
        self.head=Head(stats,'head',owner=owner)
        self.head.attachpoint=self

        self.limbs=[self.rightarm,self.leftarm,self.rightleg,self.leftleg,self.head]
        self.scars=[]
        self.diagnosis='This is a torso of {}.'.format(self.owner.indefinitename)
        self.attacktype=None
        self.attachpoint=None
        self.layers=[Flesh(length=self.length,out_radius=self.radius*0.8,in_radius=0,name='vital organs',plural=True),Bone(length=self.length,radius=self.radius*0.9,in_radius=self.radius*0.8,name='ribs',plural=True),Flesh(length=self.length,in_radius=self.radius*0.9,out_radius=self.radius)]
        self.mass=0
        for i in self.layers:
            self.mass+=i.mass
        self.movemass=self.mass
        for i in self.limbs:
            self.movemass+=i.movemass
        self.youngscalc()


    def equip(self,item):
        if item.wield=='chest':
            if self.equipment['chest']!=None:
                inventoryadd(self.equipment['chest'])
                if self.equipment['chest'].mass:
                    self.movemass-=self.equipment['chest'].mass
            self.equipment['chest']=item
            if item.mass:
                self.movemass+=item.mass




    def on_wounds(self,*args):
        self.ability=1
        self.diagnosis='This is a torso of {}.'.format(self.owner.indefinitename)



    def on_limbs(self,*args):
        pass

    def on_stats(self,*args):
        for i in self.limbs:
            if i.natural==True:
                i.stats=self.stats


class Toe(Limb):
    limbs=ListProperty(())
    stats=DictProperty(None)
    def __init__(self,stats,name,length=0.05,radius=0.005,natural=True,owner=None,**kwargs):
        super().__init__(stats,**kwargs)
        self.sizefactor=2
        self.owner=owner
        self.natural=natural
        self.name=name
        self.grasp=False
        self.support=False
        self.ability=1
        self.stats=stats
        self.length=length
        self.radius=radius
        self.equiptype=['boot']
        self.equipment={'boot':None}
        self.armor=None


        self.limbs=[]
        self.scars=[]
        self.diagnosis='This is a humanoid toe of {}.'.format(self.owner.indefinitename)
        self.attacktype=None
        self.attachpoint=None
        self.layers=[Bone(length=self.length,radius=self.radius*0.8),Flesh(length=self.length,in_radius=self.radius*0.8,out_radius=self.radius)]
        self.mass=0
        for i in self.layers:
            self.mass+=i.mass
        self.movemass=self.mass
        for i in self.limbs:
            self.movemass+=i.movemass
        self.youngscalc()

    def equip(self,item):
        if item.wield=='boot':
            self.equipment['boot']=item




    def on_wounds(self,*args):
        self.ability=1
        self.ability=max(self.ability,0)



    def on_limbs(self,*args):
        pass

    def on_stats(self,*args):
        for i in self.limbs:
            if i.natural==True:
                i.stats=self.stats


class Foot(Limb):
    limbs=ListProperty(())
    stats=DictProperty(None)
    def __init__(self,stats,name,length=0.22,radius=0.035,natural=True,owner=None,**kwargs):
        super().__init__(stats,**kwargs)
        self.length=length
        self.radius=radius
        self.sizefactor=10
        self.owner=owner
        self.natural=natural
        self.name=name
        self.grasp=False
        self.support=True
        self.ability=1
        self.stats=stats
        self.equiptype=['boot']
        self.equipment={'boot':None}
        self.armor=None


        self.firsttoe=Toe(stats,'big toe, {}'.format(name),owner=owner)
        self.secondtoe=Toe(stats,'second toe, {}'.format(name),owner=owner)
        self.thirdtoe=Toe(stats,'third toe, {}'.format(name),owner=owner)
        self.fourthtoe=Toe(stats,'fourth toe, {}'.format(name),owner=owner)
        self.fifthtoe=Toe(stats,'little toe, {}'.format(name),owner=owner)

        self.limbs=[self.firsttoe,self.secondtoe,self.thirdtoe,self.fourthtoe,self.fifthtoe]
        self.scars=[]
        self.diagnosis='This is a humanoid foot of {}.'.format(self.owner.indefinitename)
        self.attacktype='kick'
        self.balance=self.ability
        for i in self.limbs:
            self.balance+=i.ability
            i.attachpoint=self
        self.attachpoint=None
        self.layers=[Bone(length=self.length,radius=self.radius*0.8),Flesh(length=self.length,in_radius=self.radius*0.8,out_radius=self.radius)]
        self.mass=0
        for i in self.layers:
            self.mass+=i.mass
        self.movemass=self.mass
        for i in self.limbs:
            self.movemass+=i.movemass
        self.youngscalc()


    def equip(self,item):
        if item.wield=='boot':
            if self.equipment['boot']!=None:
                inventoryadd(self.equipment['boot'])
                if self.equipment['boot'].mass:
                    self.movemass-=self.equipment['boot'].mass
            self.equipment['boot']=item
            if item.mass:
                self.movemass+=item.mass
            for i in self.limbs:
                i.equip(item)




    def on_wounds(self,*args):
        self.ability=1

        self.ability=max(self.ability,0)
        if self.ability==0:
            self.support=False
        toefunction=0
        for i in self.limbs:
            toefunction+=i.ability


        self.balance=toefunction+2*self.ability

        self.balance=min(self.balance,self.attachpoint.balance*6)

        if self.balance<2:
            self.support=False


        if self.support==False:
            self.diagnosis+=' Injuries have left it impossible to walk on.'
            self.attacktype=None


    def on_limbs(self,*args):
        pass

    def on_stats(self,*args):
        for i in self.limbs:
            if i.natural==True:
                i.stats=self.stats


class Leg(Limb):
    limbs=ListProperty(())
    stats=DictProperty(None)
    def __init__(self,stats,name,length=0.8,boneradius=0.018,natural=True,owner=None,**kwargs):
        super().__init__(stats,**kwargs)
        self.length=length
        self.sizefactor=80
        self.owner=owner
        self.natural=natural
        self.name=name+'leg'
        self.grasp=False
        self.support=False
        self.ability=1
        self.stats=stats
        self.radius=(self.stats['str']/3500+boneradius**2)**0.5
        self.equiptype=['legging']
        self.equipment={'legging':None}
        self.armor=None

        self.foot=Foot(stats,'{} foot'.format(name),owner=owner)
        self.foot.attachpoint=self

        self.limbs=[self.foot]
        self.scars=[]
        self.diagnosis='This is a humanoid leg of {}.'.format(self.owner.indefinitename)
        self.attacktype=None
        self.attachpoint=None
        self.layers=[Bone(length=self.length,radius=boneradius),Flesh(length=self.length,in_radius=boneradius,out_radius=self.radius)]
        self.mass=0
        for i in self.layers:
            self.mass+=i.mass
        self.movemass=self.mass
        for i in self.limbs:
            self.movemass+=i.movemass
        self.youngscalc()

    def equip(self,item):
        if item.wield=='legging':
            if self.equipment['legging']!=None:
                inventoryadd(self.equipment['legging'])
                if self.equipment['legging'].mass:
                    self.movemass-=self.equipment['legging'].mass
            self.equipment['legging']=item
            if item.mass:
                self.movemass+=item.mass



    def on_wounds(self,*args):
        self.ability=1

        self.ability=max(self.ability,0)



    def on_limbs(self,*args):
        pass

    def on_stats(self,*args):
        for i in self.limbs:
            if i.natural==True:
                i.stats=self.stats


class Ear(Limb):
    limbs=ListProperty([])
    stats=DictProperty({})
    def __init__(self,stats,name,length=0.008,radius=0.02,natural=True,owner=None,**kwargs):
        super().__init__(stats,**kwargs)
        self.radius=radius
        self.length=length
        self.owner=owner
        self.sizefactor=1
        self.natural=natural
        self.name=name+'ear'
        self.grasp=False
        self.support=False
        self.ability=1
        self.stats=stats
        self.equiptype=['helmet']
        self.equipment={'helmet':None}
        self.armor=None
        self.scars=[]
        self.diagnosis='This is an ear of {}.'.format(self.owner.indefinitename)
        self.attacktype=None
        self.attachpoint=None
        self.layers=[Flesh(length=self.length,in_radius=0,out_radius=self.radius)]
        self.mass=0
        for i in self.layers:
            self.mass+=i.mass
        self.movemass=self.mass
        for i in self.limbs:
            self.movemass+=i.movemass
        self.youngscalc()

    def equip(self,item):
        if item.wield=='helmet':
            self.equipment['helmet']=item


    def on_wounds(self,*args):
        self.ability=1
        self.ability=max(self.ability,0)

    def on_limbs(self,*args):
        pass

    def on_stats(self,*args):
        pass


class Nose(Limb):
    limbs=ListProperty([])
    stats=DictProperty({})
    def __init__(self,stats,name,length=0.01,radius=0.02,natural=True,owner=None,**kwargs):
        super().__init__(stats,**kwargs)
        self.radius=radius
        self.length=length
        self.owner=owner
        self.sizefactor=1
        self.natural=natural
        self.name=name
        self.grasp=False
        self.support=False
        self.ability=1
        self.stats=stats
        self.equiptype=['helmet']
        self.equipment={'helmet':None}
        self.armor=None
        self.scars=[]
        self.diagnosis='This is a nose of {}.'.format(self.owner.indefinitename)
        self.attacktype=None
        self.attachpoint=None
        self.layers=[Flesh(length=self.length,in_radius=0,out_radius=self.radius)]
        self.mass=0
        for i in self.layers:
            self.mass+=i.mass
        self.movemass=self.mass
        for i in self.limbs:
            self.movemass+=i.movemass
        self.youngscalc()

    def equip(self,item):
        if item.wield=='helmet':
            self.equipment['helmet']=item


    def on_wounds(self,*args):
        self.ability=1
        self.ability=max(self.ability,0)

    def on_limbs(self,*args):
        pass

    def on_stats(self,*args):
        pass


class Eye(Limb):
    limbs=ListProperty([])
    stats=DictProperty({})
    def __init__(self,stats,name,length=None,radius=0.013,natural=True,owner=None,**kwargs):
        super().__init__(stats,**kwargs)
        self.radius=radius
        self.length=radius
        self.owner=owner
        self.sizefactor=1
        self.natural=natural
        self.name=name+'eye'
        self.grasp=False
        self.support=False
        self.ability=1
        self.stats=stats
        self.equiptype=['helmet']
        self.equipment={'helmet':None}
        self.armor=None
        self.scars=[]
        self.diagnosis='This is an eye of {}.'.format(self.owner.indefinitename)
        self.attacktype=None
        self.attachpoint=None
        self.layers=[Flesh(length=self.length,in_radius=0,out_radius=self.radius)]
        self.mass=0
        for i in self.layers:
            self.mass+=i.mass
        self.movemass=self.mass
        for i in self.limbs:
            self.movemass+=i.movemass
        self.youngscalc()

    def equip(self,item):
        if item.wield=='helmet':
            self.equipment['helmet']=item


    def on_wounds(self,*args):
        self.ability=1
        self.ability=max(self.ability,0)

    def on_limbs(self,*args):
        pass

    def on_stats(self,*args):
        pass


class Teeth(Limb):
    limbs=ListProperty(())
    stats=DictProperty(None)
    def __init__(self,stats,name,length=0.12,radius=0.005,natural=True,owner=None,**kwargs):
        super().__init__(stats,**kwargs)
        self.sizefactor=1
        self.owner=owner
        self.natural=natural
        self.name=name
        self.grasp=False
        self.support=False
        self.ability=1
        self.stats=stats
        self.length=length
        self.radius=radius
        self.equiptype=['helmet']
        self.equipment={'helmet':None}
        self.armor=None


        self.limbs=[]
        self.scars=[]
        self.diagnosis='These are the teeth of {}.'.format(self.owner.indefinitename)
        self.attacktype=None
        self.attachpoint=None
        self.layers=[Bone(length=self.length,radius=self.radius)]
        self.mass=0
        for i in self.layers:
            self.mass+=i.mass
        self.movemass=self.mass
        for i in self.limbs:
            self.movemass+=i.movemass
        self.youngscalc()

    def equip(self,item):
        if item.wield=='helmet':
            self.equipment['helmet']=item




    def on_wounds(self,*args):
        self.ability=1
        self.ability=max(self.ability,0)



    def on_limbs(self,*args):
        pass

    def on_stats(self,*args):
        for i in self.limbs:
            if i.natural==True:
                i.stats=self.stats


class Jaw(Limb):
    limbs=ListProperty(())
    stats=DictProperty(None)
    def __init__(self,stats,name,length=0.2,radius=0.018,natural=True,owner=None,**kwargs):
        super().__init__(stats,**kwargs)
        self.sizefactor=3
        self.owner=owner
        self.natural=natural
        self.name=name
        self.length=length
        self.grasp=False
        self.support=False
        self.ability=1
        self.stats=stats
        self.radius=radius
        self.equiptype=['helmet']
        self.equipment={'helmet':None}
        self.armor=None

        self.teeth=Teeth(stats,"lower teeth",owner=owner)
        self.teeth.attachpoint=self

        self.limbs=[self.teeth]
        self.scars=[]
        self.diagnosis='This is a jaw of {}.'.format(self.owner.indefinitename)
        self.attacktype='bite'
        self.attachpoint=None
        self.layers=[Bone(length=self.length,radius=self.radius*0.8),Flesh(length=self.length,in_radius=self.radius*0.8,out_radius=self.radius)]
        self.mass=0
        for i in self.layers:
            self.mass+=i.mass
        self.movemass=self.mass
        for i in self.limbs:
            self.movemass+=i.movemass
        self.youngscalc()


    def equip(self,item):
        if item.wield=='helmet':
            self.equipment['helmet']=item




    def on_limbs(self,*args):
        pass

    def on_stats(self,*args):
        for i in self.limbs:
            if i.natural==True:
                i.stats=self.stats


class Head(Limb):
    limbs=ListProperty(())
    stats=DictProperty(None)
    def __init__(self,stats,name,length=0.2,radius=0.08,natural=True,owner=None,**kwargs):
        super().__init__(stats,**kwargs)
        self.sizefactor=10
        self.owner=owner
        self.natural=natural
        self.name=name
        self.grasp=False
        self.support=False
        self.ability=1
        self.stats=stats
        self.length=length
        self.radius=radius
        self.equiptype=['helmet']
        self.equipment={'helmet':None}
        self.armor=None

        self.righteye=Eye(stats,'right',owner=owner)
        self.righteye.attachpoint=self
        self.lefteye=Eye(stats,'left',owner=owner)
        self.lefteye.attachpoint=self
        self.rightear=Ear(stats,'right',owner=owner)
        self.rightear.attachpoint=self
        self.leftear=Ear(stats,'left',owner=owner)
        self.leftear.attachpoint=self
        self.jaw=Jaw(stats,'jaw',owner=owner)
        self.jaw.attachpoint=self
        self.nose=Nose(stats,'nose',owner=owner)
        self.nose.attachpoint=self
        self.teeth=Teeth(stats,'upper teeth',owner=owner)
        self.teeth.attachpoint=self

        self.brain=Flesh(length=self.length*0.8,in_radius=0,out_radius=self.radius*0.75,name='brain')


        self.limbs=[self.righteye,self.lefteye,self.rightear,self.leftear,self.jaw,self.nose,self.teeth]
        self.scars=[]
        self.diagnosis='This is a head of {}.'.format(self.owner.indefinitename)
        self.attacktype=None
        self.attachpoint=None
        self.layers=[self.brain,Bone(length=self.length,radius=self.radius*0.9,in_radius=self.radius*0.75,name='skull'),Flesh(length=self.length,in_radius=self.radius*0.9,out_radius=self.radius)]
        self.mass=0
        for i in self.layers:
            self.mass+=i.mass
        self.movemass=self.mass
        for i in self.limbs:
            self.movemass+=i.movemass
        self.youngscalc()


    def equip(self,item):
        if item.wield=='helmet':
            if self.equipment['helmet']!=None:
                inventoryadd(self.equipment['helmet'])
                if self.equipment['helmet'].mass:
                    self.movemass-=self.equipment['helmet'].mass
            self.equipment['helmet']=item
            if item.mass:
                self.movemass+=item.mass
            for i in self.limbs:
                i.equip(item)





    def on_wounds(self,*args):
        self.ability=1
        self.diagnosis='This is a head of {}.'.format(self.owner.indefinitename)



    def on_limbs(self,*args):
        pass

    def on_stats(self,*args):
        for i in self.limbs:
            if i.natural==True:
                i.stats=self.stats


##############################################CREATURES###############################################################
class Creature(Widget):
    pass


class Human(Widget):
    def __init__(self,color=(1,1,1,1),name='the human',job='',named=False,hostile=True,player=False,stats='random'):
        if stats=='random':
            self.stats={}
            self.stats['str']=int(random.triangular(low=5,high=25,mode=15))
            self.stats['tec']=int(random.triangular(low=5,high=25,mode=15))
            self.stats['per']=int(random.triangular(low=5,high=25,mode=15))
            self.stats['wil']=int(random.triangular(low=5,high=25,mode=15))
            self.stats['luc']=int(random.triangular(low=5,high=25,mode=15))
        else:
            self.stats=stats
        self.image='C:/Project/Untitled.jpg'
        self.location=[None,None]
        self.passable=False
        self.color=color
        self.name=name+job
        self.indefinitename=name.replace('the ', 'a ',1)
        self.targetable=True
        self.hostile=hostile
        self.player=player
        self.body=Torso(self.stats,'torso',owner=self)
        self.mass=self.body.movemass
        self.movemass=self.mass

        pass
##################################################





stats={'str':20,'tec':15,'per':15,'wil':15,'luc':15}
bob=Human(stats=stats)
#        testlimb=Head(stats,'test',owner=bob)
#        testmass=testlimb.mass
#       for i in testlimb.limbs:
#            testmass+=i.mass
print(bob.mass,bob.stats,bob.body.limbs[4].youngs)
        #testhand=Hand(stats,'bob',owner=Bob)
        #testhand.wounds.append('crushed')
        #testhand.wounds[0]=2
        #print(testhand.diagnosis)

#print(bob.body.limbs[0].limbs[0].youngs)
#bob.body.limbs[0].limbs[0].armor=LongSword(thickness=0.0000001)
#bob.body.limbs[0].limbs[0].youngscalc()
#print(bob.body.limbs[0].limbs[0].youngs)

punch=Punch(bob.body.limbs[0].limbs[0])

punch.do(bob.body)
